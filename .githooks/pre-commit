#!/bin/sh

set -e # using the options command to abort script at first error
echo
echo "PRE-COMMIT"

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".ts\{0,1\}$")
ESLINT="$(git rev-parse --show-toplevel)/node_modules/.bin/eslint"

printf "\nValidating Javascript:\n"

if [ "$STAGED_FILES" = "" ]; then
  exit 0
fi

PASS=true

# Check for eslint
if [ ! -x "$ESLINT" ]; then
  printf "\t\033[41mPlease install ESlint\033[0m (npm i --save-dev eslint)"
  exit 1
fi

for FILE in $STAGED_FILES
do
  "$ESLINT" "$FILE"

  if [[ "$?" == 0 ]]; then
    printf "\t\033[32mESLint Passed: $FILE\033[0m"
  else
    printf "\t\033[41mESLint Failed: $FILE\033[0m"
    PASS=false
  fi
done

printf "\nJavascript validation completed!\n"

if ! $PASS; then
  printf "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass ESLint but do not. Please fix the ESLint errors and try again.\n"
  exit 1
else
  printf "\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi



EMAIL=$(git config user.email)

# make sure the user has registered a valid university email address
if [ $EMAIL != *"@coventry.ac.uk" ]; then
	echo "  invalid config settings"
	echo "  Your registered email is currently '$EMAIL'"
	echo "  please run the following git commands:"
	echo "    $ git config user.email xxx@coventry.ac.uk"
	echo "    $ git config user.name 'zzz'"
	echo "  where 'xxx' is your university username"
	echo "  and 'zzz' is your name as it appears on your university ID badge"
	echo
	exit 1
fi

# see if the user is trying to merge a branch into master
branch="$(git rev-parse --abbrev-ref HEAD)"
if [ $2 == 'merge' ]; then
	echo "merging branch"
	if [[ "$branch" == "master" ]]; then
		echo "  trying to merge into the 'master' branch"
		echo "  you should push the local branch to GitHub"
		echo "  and merge to master using a pull request"
		echo
		exit 1
	fi
fi

# see if the user is trying to commit to the master branch
if [ "$branch" = "master" ]; then
	read -p "  You are about to commit to the master branch, are you sure? [y|n] " -n 1 -r < /dev/tty
	echo
	if echo $REPLY | grep -E '^[Yy]$' > /dev/null
	then
		exit 0 # commit will execute
	fi
	exit 1 # commit will not execute
fi

# is the current branch a direct child of the master branch?
# echo "checking parent branch"
# PARENT=$(git show-branch -a | grep -v `git rev-parse --abbrev-ref HEAD` | grep -v origin | sed 's/.*\[\(.*\)\].*/\1/' | grep -v -e '^$' | grep -v "^----$"
# echo "parent branch is $PARENT")

# see if the user is trying to commit to the master branch
echo "  you are trying to commit to the '$branch' branch"
if [ "$branch" = "master" ]; then
  echo "    you can't commit directly to the master branch"
  echo "    create a local feature branch first"
  echo
  exit 1
  fi


echo "  commit successful..."

exit $?